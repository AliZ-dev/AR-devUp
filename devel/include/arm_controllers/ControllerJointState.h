// Generated by gencpp from file arm_controllers/ControllerJointState.msg
// DO NOT EDIT!


#ifndef ARM_CONTROLLERS_MESSAGE_CONTROLLERJOINTSTATE_H
#define ARM_CONTROLLERS_MESSAGE_CONTROLLERJOINTSTATE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace arm_controllers
{
template <class ContainerAllocator>
struct ControllerJointState_
{
  typedef ControllerJointState_<ContainerAllocator> Type;

  ControllerJointState_()
    : header()
    , name()
    , command()
    , command_dot()
    , state()
    , state_dot()
    , error()
    , error_dot()
    , effort_command()
    , effort_feedforward()
    , effort_feedback()  {
    }
  ControllerJointState_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , name(_alloc)
    , command(_alloc)
    , command_dot(_alloc)
    , state(_alloc)
    , state_dot(_alloc)
    , error(_alloc)
    , error_dot(_alloc)
    , effort_command(_alloc)
    , effort_feedforward(_alloc)
    , effort_feedback(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _name_type;
  _name_type name;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _command_type;
  _command_type command;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _command_dot_type;
  _command_dot_type command_dot;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _state_type;
  _state_type state;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _state_dot_type;
  _state_dot_type state_dot;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _error_type;
  _error_type error;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _error_dot_type;
  _error_dot_type error_dot;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _effort_command_type;
  _effort_command_type effort_command;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _effort_feedforward_type;
  _effort_feedforward_type effort_feedforward;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _effort_feedback_type;
  _effort_feedback_type effort_feedback;





  typedef boost::shared_ptr< ::arm_controllers::ControllerJointState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::arm_controllers::ControllerJointState_<ContainerAllocator> const> ConstPtr;

}; // struct ControllerJointState_

typedef ::arm_controllers::ControllerJointState_<std::allocator<void> > ControllerJointState;

typedef boost::shared_ptr< ::arm_controllers::ControllerJointState > ControllerJointStatePtr;
typedef boost::shared_ptr< ::arm_controllers::ControllerJointState const> ControllerJointStateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::arm_controllers::ControllerJointState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::arm_controllers::ControllerJointState_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::arm_controllers::ControllerJointState_<ContainerAllocator1> & lhs, const ::arm_controllers::ControllerJointState_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.name == rhs.name &&
    lhs.command == rhs.command &&
    lhs.command_dot == rhs.command_dot &&
    lhs.state == rhs.state &&
    lhs.state_dot == rhs.state_dot &&
    lhs.error == rhs.error &&
    lhs.error_dot == rhs.error_dot &&
    lhs.effort_command == rhs.effort_command &&
    lhs.effort_feedforward == rhs.effort_feedforward &&
    lhs.effort_feedback == rhs.effort_feedback;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::arm_controllers::ControllerJointState_<ContainerAllocator1> & lhs, const ::arm_controllers::ControllerJointState_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace arm_controllers

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::arm_controllers::ControllerJointState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::arm_controllers::ControllerJointState_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::arm_controllers::ControllerJointState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::arm_controllers::ControllerJointState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::arm_controllers::ControllerJointState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::arm_controllers::ControllerJointState_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::arm_controllers::ControllerJointState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e2a6814d254fca29f6f31d3dc29611cc";
  }

  static const char* value(const ::arm_controllers::ControllerJointState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe2a6814d254fca29ULL;
  static const uint64_t static_value2 = 0xf6f31d3dc29611ccULL;
};

template<class ContainerAllocator>
struct DataType< ::arm_controllers::ControllerJointState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "arm_controllers/ControllerJointState";
  }

  static const char* value(const ::arm_controllers::ControllerJointState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::arm_controllers::ControllerJointState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header header\n"
"string[] name\n"
"float64[] command\n"
"float64[] command_dot\n"
"float64[] state\n"
"float64[] state_dot\n"
"float64[] error\n"
"float64[] error_dot\n"
"float64[] effort_command\n"
"float64[] effort_feedforward\n"
"float64[] effort_feedback\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::arm_controllers::ControllerJointState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::arm_controllers::ControllerJointState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.name);
      stream.next(m.command);
      stream.next(m.command_dot);
      stream.next(m.state);
      stream.next(m.state_dot);
      stream.next(m.error);
      stream.next(m.error_dot);
      stream.next(m.effort_command);
      stream.next(m.effort_feedforward);
      stream.next(m.effort_feedback);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ControllerJointState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::arm_controllers::ControllerJointState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::arm_controllers::ControllerJointState_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "name[]" << std::endl;
    for (size_t i = 0; i < v.name.size(); ++i)
    {
      s << indent << "  name[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.name[i]);
    }
    s << indent << "command[]" << std::endl;
    for (size_t i = 0; i < v.command.size(); ++i)
    {
      s << indent << "  command[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.command[i]);
    }
    s << indent << "command_dot[]" << std::endl;
    for (size_t i = 0; i < v.command_dot.size(); ++i)
    {
      s << indent << "  command_dot[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.command_dot[i]);
    }
    s << indent << "state[]" << std::endl;
    for (size_t i = 0; i < v.state.size(); ++i)
    {
      s << indent << "  state[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.state[i]);
    }
    s << indent << "state_dot[]" << std::endl;
    for (size_t i = 0; i < v.state_dot.size(); ++i)
    {
      s << indent << "  state_dot[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.state_dot[i]);
    }
    s << indent << "error[]" << std::endl;
    for (size_t i = 0; i < v.error.size(); ++i)
    {
      s << indent << "  error[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.error[i]);
    }
    s << indent << "error_dot[]" << std::endl;
    for (size_t i = 0; i < v.error_dot.size(); ++i)
    {
      s << indent << "  error_dot[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.error_dot[i]);
    }
    s << indent << "effort_command[]" << std::endl;
    for (size_t i = 0; i < v.effort_command.size(); ++i)
    {
      s << indent << "  effort_command[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.effort_command[i]);
    }
    s << indent << "effort_feedforward[]" << std::endl;
    for (size_t i = 0; i < v.effort_feedforward.size(); ++i)
    {
      s << indent << "  effort_feedforward[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.effort_feedforward[i]);
    }
    s << indent << "effort_feedback[]" << std::endl;
    for (size_t i = 0; i < v.effort_feedback.size(); ++i)
    {
      s << indent << "  effort_feedback[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.effort_feedback[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ARM_CONTROLLERS_MESSAGE_CONTROLLERJOINTSTATE_H
